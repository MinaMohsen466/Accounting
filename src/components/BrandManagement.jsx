import React, { useState } from 'react'
import { useBrand } from '../contexts/BrandContext'
import { useLanguage } from '../contexts/LanguageContext'
import { useAuth } from '../contexts/AuthContext'
import PermissionDenied from './PermissionDenied'
import './BrandManagement.css'

const BrandManagement = () => {
  const { brandSettings, saveBrandSettings, uploadImage, resetToDefaults } = useBrand()
  const { language } = useLanguage()
  const { hasPermission } = useAuth()

  // Check if user has permission to manage brand settings
  if (!hasPermission('manage_brand_settings')) {
    return (
      <PermissionDenied 
        message="ููุณ ูุฏูู ุตูุงุญูุฉ ูุฅุฏุงุฑุฉ ุงููููุฉ ุงูุจุตุฑูุฉ"
        description="ุชุญุชุงุฌ ุฅูู ุตูุงุญูุฉ 'ุฅุฏุงุฑุฉ ุงููููุฉ ุงูุจุตุฑูุฉ' ูููุตูู ุฅูู ูุฐู ุงูุตูุญุฉ"
      />
    )
  }
  
  const [formData, setFormData] = useState({
    ...brandSettings,
    // ุฅุนุฏุงุฏุงุช ุงูููุงุชูุฑ
    invoiceSettings: brandSettings.invoiceSettings || {
      companyName: 'AccouTech Pro',
      companyAddress: '',
      companyPhone: '',
      companyEmail: '',
      companyWebsite: '',
      receiverSignatureLabel: 'ุชูููุน ุงููุณุชูู',
      showReceiverSignature: true,
      policies: [
        'ุฌููุน ุงููุจูุนุงุช ููุงุฆูุฉ',
        'ูุฑุฌู ูุญุต ุงูุจุถุงุนุฉ ูุจู ุงูุงุณุชูุงู',
        'ุงููุฑุชุฌุนุงุช ุฎูุงู 7 ุฃูุงู ููุท'
      ],
      showPolicies: true,
      footerText: 'ุดูุฑุงู ูุชุนุงูููู ูุนูุง',
      showLogo: true,
      logoSize: 'medium', // small, medium, large
      headerText: '',
      showCompanyInfo: true
    }
  })
  const [uploading, setUploading] = useState({
    logo: false,
    favicon: false
  })
  const [notification, setNotification] = useState(null)

  const showNotification = (message, type = 'success') => {
    setNotification({ message, type })
    setTimeout(() => setNotification(null), 4000)
  }

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target
    
    if (name.startsWith('invoice.')) {
      const invoiceField = name.replace('invoice.', '')
      setFormData(prev => ({
        ...prev,
        invoiceSettings: {
          ...prev.invoiceSettings,
          [invoiceField]: type === 'checkbox' ? checked : value
        }
      }))
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: type === 'checkbox' ? checked : value
      }))
    }
  }

  const handlePolicyChange = (index, value) => {
    setFormData(prev => ({
      ...prev,
      invoiceSettings: {
        ...prev.invoiceSettings,
        policies: prev.invoiceSettings.policies.map((policy, i) => 
          i === index ? value : policy
        )
      }
    }))
  }

  const addPolicy = () => {
    setFormData(prev => ({
      ...prev,
      invoiceSettings: {
        ...prev.invoiceSettings,
        policies: [...prev.invoiceSettings.policies, '']
      }
    }))
  }

  const removePolicy = (index) => {
    setFormData(prev => ({
      ...prev,
      invoiceSettings: {
        ...prev.invoiceSettings,
        policies: prev.invoiceSettings.policies.filter((_, i) => i !== index)
      }
    }))
  }

  const handleSave = () => {
    const result = saveBrandSettings(formData)
    if (result.success) {
      showNotification('ุชู ุญูุธ ุฅุนุฏุงุฏุงุช ุงููููุฉ ุงูุจุตุฑูุฉ ุจูุฌุงุญ', 'success')
    } else {
      showNotification(result.error || 'ูุดู ูู ุญูุธ ุงูุฅุนุฏุงุฏุงุช', 'error')
    }
  }

  const handleFileUpload = async (e, type) => {
    const file = e.target.files[0]
    if (!file) return

    setUploading(prev => ({ ...prev, [type]: true }))

    try {
      const base64 = await uploadImage(file, type)
      
      if (type === 'logo') {
        setFormData(prev => ({ ...prev, logoUrl: base64 }))
        showNotification('ุชู ุฑูุน ุงูููุฌู ุจูุฌุงุญ', 'success')
      } else if (type === 'favicon') {
        setFormData(prev => ({ ...prev, faviconUrl: base64 }))
        showNotification('ุชู ุฑูุน ุงููุงููููู ุจูุฌุงุญ', 'success')
      }
    } catch (error) {
      showNotification(error.message, 'error')
    } finally {
      setUploading(prev => ({ ...prev, [type]: false }))
    }
  }

  const handleRemoveLogo = () => {
    setFormData(prev => ({ ...prev, logoUrl: '' }))
    showNotification('ุชู ุญุฐู ุงูููุฌู', 'success')
  }

  const handleReset = () => {
    if (window.confirm('ูู ุฃูุช ูุชุฃูุฏ ูู ุฅุนุงุฏุฉ ุชุนููู ุฌููุน ุฅุนุฏุงุฏุงุช ุงููููุฉ ุงูุจุตุฑูุฉ ููุงูุชุฑุงุถูุฉุ')) {
      const result = resetToDefaults()
      if (result.success) {
        setFormData({
          appName: 'AccouTech Pro - ูุธุงู ุงููุญุงุณุจุฉ',
          appNameEn: 'AccouTech Pro - Accounting System',
          logoUrl: '',
          faviconUrl: '/favicon.svg',
          companyName: 'AccouTech Pro',
          companyNameEn: 'AccouTech Pro',
          tagline: 'ูุธุงู ูุญุงุณุจุฉ ูุชูุงูู',
          taglineEn: 'Complete Accounting System',
          primaryColor: '#1e40af',
          secondaryColor: '#3b82f6'
        })
        showNotification('ุชู ุฅุนุงุฏุฉ ุชุนููู ุงูุฅุนุฏุงุฏุงุช ููุงูุชุฑุงุถูุฉ', 'success')
      }
    }
  }

  return (
    <div className="brand-management">
      <div className="brand-header">
        <h3>ุฅุฏุงุฑุฉ ุงููููุฉ ุงูุจุตุฑูุฉ</h3>
        <p>ุชุฎุตูุต ุดุนุงุฑ ูุฃููุงู ููุนูููุงุช ุงูุชุทุจูู</p>
      </div>

      {notification && (
        <div className={`notification ${notification.type}`}>
          {notification.message}
        </div>
      )}

      <div className="brand-sections">
        {/* ูุณู ุงูููุฌู */}
        <div className="brand-section">
          <h4>
            <span className="section-icon">๐จ</span>
            ุงูููุฌู
          </h4>
          
          <div className="logo-upload">
            <div className="current-logo">
              {formData.logoUrl ? (
                <div className="logo-preview">
                  <img src={formData.logoUrl} alt="Current Logo" />
                  <button 
                    className="remove-logo-btn"
                    onClick={handleRemoveLogo}
                    title="ุญุฐู ุงูููุฌู"
                  >
                    โ
                  </button>
                </div>
              ) : (
                <div className="no-logo">
                  <span>๐ท</span>
                  <p>ูุง ููุฌุฏ ููุฌู</p>
                </div>
              )}
            </div>
            
            <div className="upload-controls">
              <input
                type="file"
                id="logo-upload"
                accept="image/*"
                onChange={(e) => handleFileUpload(e, 'logo')}
                disabled={uploading.logo}
                style={{ display: 'none' }}
              />
              <label 
                htmlFor="logo-upload" 
                className={`upload-btn ${uploading.logo ? 'uploading' : ''}`}
              >
                {uploading.logo ? 'ุฌุงุฑู ุงูุฑูุน...' : 'ุงุฎุชูุงุฑ ููุฌู'}
              </label>
              <p className="upload-hint">
                ุตูุบ ูุฏุนููุฉ: JPG, PNG, SVG, GIF (ุญุฏ ุฃูุตู 5MB)
              </p>
            </div>
          </div>
        </div>

        {/* ูุณู ุงููุงููููู */}
        <div className="brand-section">
          <h4>
            <span className="section-icon">๐</span>
            ุฃููููุฉ ุงููููุน (Favicon)
          </h4>
          
          <div className="favicon-upload">
            <div className="current-favicon">
              {formData.faviconUrl && (
                <img src={formData.faviconUrl} alt="Current Favicon" />
              )}
            </div>
            
            <div className="upload-controls">
              <input
                type="file"
                id="favicon-upload"
                accept="image/*"
                onChange={(e) => handleFileUpload(e, 'favicon')}
                disabled={uploading.favicon}
                style={{ display: 'none' }}
              />
              <label 
                htmlFor="favicon-upload" 
                className={`upload-btn ${uploading.favicon ? 'uploading' : ''}`}
              >
                {uploading.favicon ? 'ุฌุงุฑู ุงูุฑูุน...' : 'ุงุฎุชูุงุฑ ุฃููููุฉ'}
              </label>
              <p className="upload-hint">
                ูููุถู ุงุณุชุฎุฏุงู ุฃููููุฉ 32x32 ุฃู 64x64 ุจูุณู
              </p>
            </div>
          </div>
        </div>

        {/* ูุณู ูุนูููุงุช ุงูุชุทุจูู */}
        <div className="brand-section">
          <h4>
            <span className="section-icon">๐</span>
            ูุนูููุงุช ุงูุชุทุจูู
          </h4>
          
          <div className="form-grid">
            <div className="form-group">
              <label>ุงุณู ุงูุชุทุจูู (ุนุฑุจู)</label>
              <input
                type="text"
                name="appName"
                value={formData.appName}
                onChange={handleInputChange}
                placeholder="AccouTech Pro - ูุธุงู ุงููุญุงุณุจุฉ"
              />
            </div>

            <div className="form-group">
              <label>ุงุณู ุงูุชุทุจูู (ุฅูุฌููุฒู)</label>
              <input
                type="text"
                name="appNameEn"
                value={formData.appNameEn}
                onChange={handleInputChange}
                placeholder="AccouTech Pro - Accounting System"
              />
            </div>

            <div className="form-group">
              <label>ุงูุดุนุงุฑ ุงููุฑุนู (ุนุฑุจู)</label>
              <input
                type="text"
                name="tagline"
                value={formData.tagline}
                onChange={handleInputChange}
                placeholder="ูุธุงู ูุญุงุณุจุฉ ูุชูุงูู"
              />
            </div>

            <div className="form-group">
              <label>ุงูุดุนุงุฑ ุงููุฑุนู (ุฅูุฌููุฒู)</label>
              <input
                type="text"
                name="taglineEn"
                value={formData.taglineEn}
                onChange={handleInputChange}
                placeholder="Complete Accounting System"
              />
            </div>
          </div>
        </div>

        {/* ูุณู ุฅุนุฏุงุฏุงุช ุงูููุงุชูุฑ */}
        <div className="brand-section">
          <h4>
            <span className="section-icon">๐งพ</span>
            ุฅุนุฏุงุฏุงุช ุงูููุงุชูุฑ ุงููุทุจูุนุฉ
          </h4>
          
          {/* ูุนูููุงุช ุงูุดุฑูุฉ */}
          <div className="invoice-subsection">
            <h5>ูุนูููุงุช ุงูุดุฑูุฉ</h5>
            
            <div className="form-group">
              <label>ุงุณู ุงูุดุฑูุฉ</label>
              <input
                type="text"
                name="invoice.companyName"
                value={formData.invoiceSettings.companyName}
                onChange={handleInputChange}
                placeholder="ุงุณู ุงูุดุฑูุฉ ุฃู ุงููุญู"
              />
            </div>
            
            <div className="form-row">
              <div className="form-group">
                <label>ุฑูู ุงููุงุชู</label>
                <input
                  type="text"
                  name="invoice.companyPhone"
                  value={formData.invoiceSettings.companyPhone}
                  onChange={handleInputChange}
                  placeholder="ุฑูู ูุงุชู ุงูุดุฑูุฉ"
                />
              </div>
              
              <div className="form-group">
                <label>ุงูุจุฑูุฏ ุงูุฅููุชุฑููู</label>
                <input
                  type="email"
                  name="invoice.companyEmail"
                  value={formData.invoiceSettings.companyEmail}
                  onChange={handleInputChange}
                  placeholder="email@company.com"
                />
              </div>
            </div>
            
            <div className="form-group">
              <label>ุนููุงู ุงูุดุฑูุฉ</label>
              <textarea
                name="invoice.companyAddress"
                value={formData.invoiceSettings.companyAddress}
                onChange={handleInputChange}
                placeholder="ุงูุนููุงู ุงููุงูู ููุดุฑูุฉ"
                rows="3"
              />
            </div>
            
            <div className="form-group">
              <label>ุงููููุน ุงูุฅููุชุฑููู</label>
              <input
                type="url"
                name="invoice.companyWebsite"
                value={formData.invoiceSettings.companyWebsite}
                onChange={handleInputChange}
                placeholder="https://www.company.com"
              />
            </div>
          </div>

          {/* ุฅุนุฏุงุฏุงุช ุนุฑุถ ุงูููุฌู */}
          <div className="invoice-subsection">
            <h5>ุฅุนุฏุงุฏุงุช ุงูููุฌู</h5>
            
            <div className="form-row">
              <div className="form-group">
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    name="invoice.showLogo"
                    checked={formData.invoiceSettings.showLogo}
                    onChange={handleInputChange}
                  />
                  ุนุฑุถ ุงูููุฌู ูู ุงููุงุชูุฑุฉ
                </label>
              </div>
              
              <div className="form-group">
                <label>ุญุฌู ุงูููุฌู</label>
                <select
                  name="invoice.logoSize"
                  value={formData.invoiceSettings.logoSize}
                  onChange={handleInputChange}
                  disabled={!formData.invoiceSettings.showLogo}
                >
                  <option value="small">ุตุบูุฑ</option>
                  <option value="medium">ูุชูุณุท</option>
                  <option value="large">ูุจูุฑ</option>
                </select>
              </div>
            </div>
            
            <div className="form-group">
              <label>ูุต ุฅุถุงูู ูู ุงูุฑุฃุณ</label>
              <input
                type="text"
                name="invoice.headerText"
                value={formData.invoiceSettings.headerText}
                onChange={handleInputChange}
                placeholder="ูุต ุฅุถุงูู ูุธูุฑ ุชุญุช ุงูููุฌู"
              />
            </div>
          </div>

          {/* ุฅุนุฏุงุฏุงุช ุชูููุน ุงููุณุชูู */}
          <div className="invoice-subsection">
            <h5>ุชูููุน ุงููุณุชูู</h5>
            
            <div className="form-row">
              <div className="form-group">
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    name="invoice.showReceiverSignature"
                    checked={formData.invoiceSettings.showReceiverSignature}
                    onChange={handleInputChange}
                  />
                  ุนุฑุถ ูุณุงุญุฉ ุชูููุน ุงููุณุชูู
                </label>
              </div>
              
              <div className="form-group">
                <label>ุนููุงู ุงูุชูููุน</label>
                <input
                  type="text"
                  name="invoice.receiverSignatureLabel"
                  value={formData.invoiceSettings.receiverSignatureLabel}
                  onChange={handleInputChange}
                  placeholder="ุชูููุน ุงููุณุชูู"
                  disabled={!formData.invoiceSettings.showReceiverSignature}
                />
              </div>
            </div>
          </div>

          {/* ุณูุงุณุงุช ุงููุญู */}
          <div className="invoice-subsection">
            <h5>ุณูุงุณุงุช ุงููุญู</h5>
            
            <div className="form-group">
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  name="invoice.showPolicies"
                  checked={formData.invoiceSettings.showPolicies}
                  onChange={handleInputChange}
                />
                ุนุฑุถ ุณูุงุณุงุช ุงููุญู ูู ุงููุงุชูุฑุฉ
              </label>
            </div>
            
            {formData.invoiceSettings.showPolicies && (
              <div className="policies-list">
                <div className="form-group">
                  <label>ุนููุงู ูุณู ุงูุณูุงุณุงุช:</label>
                  <input
                    type="text"
                    value={formData.invoiceSettings.policiesTitle || ''}
                    onChange={(e) => setFormData(prev => ({
                      ...prev,
                      invoiceSettings: {
                        ...prev.invoiceSettings,
                        policiesTitle: e.target.value
                      }
                    }))}
                    placeholder="ุณูุงุณุงุช ูุดุฑูุท ุงููุญู"
                    className="form-input"
                  />
                </div>
                <label>ูุงุฆูุฉ ุงูุณูุงุณุงุช:</label>
                {formData.invoiceSettings.policies.map((policy, index) => (
                  <div key={index} className="policy-item">
                    <input
                      type="text"
                      value={policy}
                      onChange={(e) => handlePolicyChange(index, e.target.value)}
                      placeholder={`ุงูุณูุงุณุฉ ${index + 1}`}
                    />
                    {formData.invoiceSettings.policies.length > 1 && (
                      <button
                        type="button"
                        className="remove-policy-btn"
                        onClick={() => removePolicy(index)}
                      >
                        ร
                      </button>
                    )}
                  </div>
                ))}
                <button
                  type="button"
                  className="add-policy-btn"
                  onClick={addPolicy}
                >
                  + ุฅุถุงูุฉ ุณูุงุณุฉ ุฌุฏูุฏุฉ
                </button>
              </div>
            )}
          </div>

          {/* ูุต ุงูุชุฐููู */}
          <div className="invoice-subsection">
            <h5>ุชุฐููู ุงููุงุชูุฑุฉ</h5>
            
            <div className="form-group">
              <label>ูุต ุงูุดูุฑ ูุงูุชูุฏูุฑ</label>
              <textarea
                name="invoice.footerText"
                value={formData.invoiceSettings.footerText}
                onChange={handleInputChange}
                placeholder="ูุต ูุธูุฑ ูู ููุงูุฉ ุงููุงุชูุฑุฉ"
                rows="2"
              />
            </div>
          </div>
        </div>

        {/* ูุณู ุงูุฃููุงู */}
        <div className="brand-section">
          <h4>
            <span className="section-icon">๐จ</span>
            ุฃููุงู ุงูุชุทุจูู
          </h4>
          
          <div className="color-grid">
            <div className="color-group">
              <label>ุงูููู ุงูุฃุณุงุณู</label>
              <div className="color-input-group">
                <input
                  type="color"
                  name="primaryColor"
                  value={formData.primaryColor}
                  onChange={handleInputChange}
                />
                <input
                  type="text"
                  name="primaryColor"
                  value={formData.primaryColor}
                  onChange={handleInputChange}
                  placeholder="#1e40af"
                />
              </div>
            </div>

            <div className="color-group">
              <label>ุงูููู ุงูุซุงููู</label>
              <div className="color-input-group">
                <input
                  type="color"
                  name="secondaryColor"
                  value={formData.secondaryColor}
                  onChange={handleInputChange}
                />
                <input
                  type="text"
                  name="secondaryColor"
                  value={formData.secondaryColor}
                  onChange={handleInputChange}
                  placeholder="#3b82f6"
                />
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* ุฃุฒุฑุงุฑ ุงูุญูุธ ูุงูุฅุนุงุฏุฉ ุชุนููู */}
      <div className="brand-actions">
        {hasPermission('manage_brand_settings') && (
          <>
            <button 
              className="btn btn-secondary"
              onClick={handleReset}
            >
              ุฅุนุงุฏุฉ ุชุนููู ุงูุชุฑุงุถู
            </button>
            <button 
              className="btn btn-primary"
              onClick={handleSave}
            >
              ุญูุธ ุงูุชุบููุฑุงุช
            </button>
          </>
        )}
      </div>

      {/* ูุนุงููุฉ ุณุฑูุนุฉ */}
      <div className="brand-preview">
        <h4>ูุนุงููุฉ</h4>
        <div className="preview-card" style={{
          backgroundColor: formData.primaryColor + '10',
          borderColor: formData.primaryColor
        }}>
          {formData.logoUrl && (
            <img src={formData.logoUrl} alt="Preview Logo" className="preview-logo" />
          )}
          <h5 style={{ color: formData.primaryColor }}>
            {language === 'ar' ? formData.appName : formData.appNameEn}
          </h5>
          <p style={{ color: formData.secondaryColor }}>
            {language === 'ar' ? formData.tagline : formData.taglineEn}
          </p>
        </div>
      </div>
    </div>
  )
}

export default BrandManagement